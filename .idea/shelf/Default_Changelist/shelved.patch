Index: src/map.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/** @file\n * Interfejs klasy przechowującej mapę dróg krajowych\n *\n * @author Łukasz Kamiński <kamis@mimuw.edu.pl>, Marcin Peczarski <marpe@mimuw.edu.pl>\n * @copyright Uniwersytet Warszawski\n * @date 20.03.2019\n */\n\n#ifndef __MAP_H__\n#define __MAP_H__\n\n#include <stdbool.h>\n\n/**\n * Struktura przechowująca mapę dróg krajowych.\n */\ntypedef struct Map Map;\n\n/** @brief Tworzy nową strukturę.\n * Tworzy nową, pustą strukturę niezawierającą żadnych miast, odcinków dróg ani\n * dróg krajowych.\n * @return Wskaźnik na utworzoną strukturę lub NULL, gdy nie udało się\n * zaalokować pamięci.\n */\nMap* newMap(void);\n\n/** @brief Usuwa strukturę.\n * Usuwa strukturę wskazywaną przez @p map.\n * Nic nie robi, jeśli wskaźnik ten ma wartość NULL.\n * @param[in] map        – wskaźnik na usuwaną strukturę.\n */\nvoid deleteMap(Map *map);\n\n/** @brief Dodaje do mapy odcinek drogi między dwoma różnymi miastami.\n * Jeśli któreś z podanych miast nie istnieje, to dodaje go do mapy, a następnie\n * dodaje do mapy odcinek drogi między tymi miastami.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] city1      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] city2      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] length     – długość w km odcinka drogi;\n * @param[in] builtYear  – rok budowy odcinka drogi.\n * @return Wartość @p true, jeśli odcinek drogi został dodany.\n * Wartość @p false, jeśli wystąpił błąd: któryś z parametrów ma niepoprawną\n * wartość, obie podane nazwy miast są identyczne, odcinek drogi między tymi\n * miastami już istnieje lub nie udało się zaalokować pamięci.\n */\nbool addRoad(Map *map, const char *city1, const char *city2,\n             unsigned length, int builtYear);\n\n/** @brief Modyfikuje rok ostatniego remontu odcinka drogi.\n * Dla odcinka drogi między dwoma miastami zmienia rok jego ostatniego remontu\n * lub ustawia ten rok, jeśli odcinek nie był jeszcze remontowany.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] city1      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] city2      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] repairYear – rok ostatniego remontu odcinka drogi.\n * @return Wartość @p true, jeśli modyfikacja się powiodła.\n * Wartość @p false, jeśli wystąpił błąd: któryś z parametrów ma niepoprawną\n * wartość, któreś z podanych miast nie istnieje, nie ma odcinka drogi między\n * podanymi miastami, podany rok jest wcześniejszy niż zapisany dla tego odcinka\n * drogi rok budowy lub ostatniego remontu.\n */\nbool repairRoad(Map *map, const char *city1, const char *city2, int repairYear);\n\n/** @brief Łączy dwa różne miasta drogą krajową.\n * Tworzy drogę krajową pomiędzy dwoma miastami i nadaje jej podany numer.\n * Wśród istniejących odcinków dróg wyszukuje najkrótszą drogę. Jeśli jest\n * więcej niż jeden sposób takiego wyboru, to dla każdego wariantu wyznacza\n * wśród wybranych w nim odcinków dróg ten, który był najdawniej wybudowany lub\n * remontowany i wybiera wariant z odcinkiem, który jest najmłodszy.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] routeId    – numer drogi krajowej;\n * @param[in] city1      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] city2      – wskaźnik na napis reprezentujący nazwę miasta.\n * @return Wartość @p true, jeśli droga krajowa została utworzona.\n * Wartość @p false, jeśli wystąpił błąd: któryś z parametrów ma niepoprawną\n * wartość, istnieje już droga krajowa o podanym numerze, któreś z podanych\n * miast nie istnieje, obie podane nazwy miast są identyczne, nie można\n * jednoznacznie wyznaczyć drogi krajowej między podanymi miastami lub nie udało\n * się zaalokować pamięci.\n */\nbool newRoute(Map *map, unsigned routeId,\n              const char *city1, const char *city2);\n\n/** @brief Wydłuża drogę krajową do podanego miasta.\n * Dodaje do drogi krajowej nowe odcinki dróg do podanego miasta w taki sposób,\n * aby nowy fragment drogi krajowej był najkrótszy. Jeśli jest więcej niż jeden\n * sposób takiego wydłużenia, to dla każdego wariantu wyznacza wśród dodawanych\n * odcinków dróg ten, który był najdawniej wybudowany lub remontowany i wybiera\n * wariant z odcinkiem, który jest najmłodszy.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] routeId    – numer drogi krajowej;\n * @param[in] city       – wskaźnik na napis reprezentujący nazwę miasta.\n * @return Wartość @p true, jeśli droga krajowa została wydłużona.\n * Wartość @p false, jeśli wystąpił błąd: któryś z parametrów ma niepoprawną\n * nazwę, nie istnieje droga krajowa o podanym numerze, nie ma miasta o podanej\n * nazwie, przez podane miasto już przechodzi droga krajowa o podanym numerze,\n * podana droga krajowa kończy się w podanym mieście, nie można jednoznacznie\n * wyznaczyć nowego fragmentu drogi krajowej lub nie udało się zaalokować\n * pamięci.\n */\nbool extendRoute(Map *map, unsigned routeId, const char *city);\n\n/** @brief Usuwa odcinek drogi między dwoma różnymi miastami.\n * Usuwa odcinek drogi między dwoma miastami. Jeśli usunięcie tego odcinka drogi\n * powoduje przerwanie ciągu jakiejś drogi krajowej, to uzupełnia ją\n * istniejącymi odcinkami dróg w taki sposób, aby była najkrótsza. Jeśli jest\n * więcej niż jeden sposób takiego uzupełnienia, to dla każdego wariantu\n * wyznacza wśród dodawanych odcinków drogi ten, który był najdawniej wybudowany\n * lub remontowany i wybiera wariant z odcinkiem, który jest najmłodszy.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] city1      – wskaźnik na napis reprezentujący nazwę miasta;\n * @param[in] city2      – wskaźnik na napis reprezentujący nazwę miasta.\n * @return Wartość @p true, jeśli odcinek drogi został usunięty.\n * Wartość @p false, jeśli z powodu błędu nie można usunąć tego odcinka drogi:\n * któryś z parametrów ma niepoprawną wartość, nie ma któregoś z podanych miast,\n * nie istnieje droga między podanymi miastami, nie da się jednoznacznie\n * uzupełnić przerwanego ciągu drogi krajowej lub nie udało się zaalokować\n * pamięci.\n */\nbool removeRoad(Map *map, const char *city1, const char *city2);\n\n/** @brief Udostępnia informacje o drodze krajowej.\n * Zwraca wskaźnik na napis, który zawiera informacje o drodze krajowej. Alokuje\n * pamięć na ten napis. Zwraca pusty napis, jeśli nie istnieje droga krajowa\n * o podanym numerze. Zaalokowaną pamięć trzeba zwolnić za pomocą funkcji free.\n * Informacje wypisywane są w formacie:\n * numer drogi krajowej;nazwa miasta;długość odcinka drogi;rok budowy lub\n * ostatniego remontu;nazwa miasta;długość odcinka drogi;rok budowy lub\n * ostatniego remontu;nazwa miasta;…;nazwa miasta.\n * Kolejność miast na liście jest taka, aby miasta @p city1 i @p city2, podane\n * w wywołaniu funkcji @ref newRoute, które utworzyło tę drogę krajową, zostały\n * wypisane w tej kolejności.\n * @param[in,out] map    – wskaźnik na strukturę przechowującą mapę dróg;\n * @param[in] routeId    – numer drogi krajowej.\n * @return Wskaźnik na napis lub NULL, gdy nie udało się zaalokować pamięci.\n */\nchar const* getRouteDescription(Map *map, unsigned routeId);\n\n#endif /* __MAP_H__ */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/map.h	(revision c9ed0a76a00e09aa2c03145070e1d6daabb9577e)
+++ src/map.h	(date 1555781513000)
@@ -11,6 +11,25 @@
 
 #include <stdbool.h>
 
+struct City {
+  char *name;
+  struct Road {
+    int index;
+    int year;
+    struct road *next;
+  };
+  struct road *roads;
+};
+
+typedef struct City City;
+typedef struct Road Road;
+
+struct Map{
+  int numberOfCities;
+  int totalAlloced;
+  City *cities;
+};
+
 /**
  * Struktura przechowująca mapę dróg krajowych.
  */
